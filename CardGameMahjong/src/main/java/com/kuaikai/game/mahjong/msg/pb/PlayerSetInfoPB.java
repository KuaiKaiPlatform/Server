// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mahjong/PlayerSetInfo.proto

package com.kuaikai.game.mahjong.msg.pb;

public final class PlayerSetInfoPB {
  private PlayerSetInfoPB() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface PlayerSetInfoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required int32 uid = 1;
    /**
     * <code>required int32 uid = 1;</code>
     *
     * <pre>
     * 玩家ID
     * </pre>
     */
    boolean hasUid();
    /**
     * <code>required int32 uid = 1;</code>
     *
     * <pre>
     * 玩家ID
     * </pre>
     */
    int getUid();

    // required int32 handCardNum = 2;
    /**
     * <code>required int32 handCardNum = 2;</code>
     *
     * <pre>
     * 手牌数量
     * </pre>
     */
    boolean hasHandCardNum();
    /**
     * <code>required int32 handCardNum = 2;</code>
     *
     * <pre>
     * 手牌数量
     * </pre>
     */
    int getHandCardNum();

    // repeated int32 handcards = 3;
    /**
     * <code>repeated int32 handcards = 3;</code>
     *
     * <pre>
     * 手牌（只有自己收到）
     * </pre>
     */
    java.util.List<java.lang.Integer> getHandcardsList();
    /**
     * <code>repeated int32 handcards = 3;</code>
     *
     * <pre>
     * 手牌（只有自己收到）
     * </pre>
     */
    int getHandcardsCount();
    /**
     * <code>repeated int32 handcards = 3;</code>
     *
     * <pre>
     * 手牌（只有自己收到）
     * </pre>
     */
    int getHandcards(int index);

    // repeated int32 discards = 4;
    /**
     * <code>repeated int32 discards = 4;</code>
     *
     * <pre>
     * 打出的牌
     * </pre>
     */
    java.util.List<java.lang.Integer> getDiscardsList();
    /**
     * <code>repeated int32 discards = 4;</code>
     *
     * <pre>
     * 打出的牌
     * </pre>
     */
    int getDiscardsCount();
    /**
     * <code>repeated int32 discards = 4;</code>
     *
     * <pre>
     * 打出的牌
     * </pre>
     */
    int getDiscards(int index);

    // repeated .mahjong.CardGroup cardGroups = 5;
    /**
     * <code>repeated .mahjong.CardGroup cardGroups = 5;</code>
     *
     * <pre>
     * 吃碰杠的牌
     * </pre>
     */
    java.util.List<com.kuaikai.game.mahjong.msg.pb.CardGroupPB.CardGroup> 
        getCardGroupsList();
    /**
     * <code>repeated .mahjong.CardGroup cardGroups = 5;</code>
     *
     * <pre>
     * 吃碰杠的牌
     * </pre>
     */
    com.kuaikai.game.mahjong.msg.pb.CardGroupPB.CardGroup getCardGroups(int index);
    /**
     * <code>repeated .mahjong.CardGroup cardGroups = 5;</code>
     *
     * <pre>
     * 吃碰杠的牌
     * </pre>
     */
    int getCardGroupsCount();
    /**
     * <code>repeated .mahjong.CardGroup cardGroups = 5;</code>
     *
     * <pre>
     * 吃碰杠的牌
     * </pre>
     */
    java.util.List<? extends com.kuaikai.game.mahjong.msg.pb.CardGroupPB.CardGroupOrBuilder> 
        getCardGroupsOrBuilderList();
    /**
     * <code>repeated .mahjong.CardGroup cardGroups = 5;</code>
     *
     * <pre>
     * 吃碰杠的牌
     * </pre>
     */
    com.kuaikai.game.mahjong.msg.pb.CardGroupPB.CardGroupOrBuilder getCardGroupsOrBuilder(
        int index);

    // repeated int32 points = 6;
    /**
     * <code>repeated int32 points = 6;</code>
     *
     * <pre>
     * 本场各项总得失分列表
     * </pre>
     */
    java.util.List<java.lang.Integer> getPointsList();
    /**
     * <code>repeated int32 points = 6;</code>
     *
     * <pre>
     * 本场各项总得失分列表
     * </pre>
     */
    int getPointsCount();
    /**
     * <code>repeated int32 points = 6;</code>
     *
     * <pre>
     * 本场各项总得失分列表
     * </pre>
     */
    int getPoints(int index);

    // optional .mahjong.Direction direction = 7;
    /**
     * <code>optional .mahjong.Direction direction = 7;</code>
     *
     * <pre>
     * 玩家方位（门风）
     * </pre>
     */
    boolean hasDirection();
    /**
     * <code>optional .mahjong.Direction direction = 7;</code>
     *
     * <pre>
     * 玩家方位（门风）
     * </pre>
     */
    com.kuaikai.game.mahjong.msg.pb.DirectionPB.Direction getDirection();

    // optional int32 bet = 8;
    /**
     * <code>optional int32 bet = 8;</code>
     *
     * <pre>
     * 本局下注数量
     * </pre>
     */
    boolean hasBet();
    /**
     * <code>optional int32 bet = 8;</code>
     *
     * <pre>
     * 本局下注数量
     * </pre>
     */
    int getBet();

    // optional .mahjong.CardType queMen = 9;
    /**
     * <code>optional .mahjong.CardType queMen = 9;</code>
     *
     * <pre>
     * 本局缺门，0 无效  10 万 20 条 30 筒
     * </pre>
     */
    boolean hasQueMen();
    /**
     * <code>optional .mahjong.CardType queMen = 9;</code>
     *
     * <pre>
     * 本局缺门，0 无效  10 万 20 条 30 筒
     * </pre>
     */
    com.kuaikai.game.mahjong.msg.pb.CardTypePB.CardType getQueMen();

    // optional bool baoTing = 10;
    /**
     * <code>optional bool baoTing = 10;</code>
     *
     * <pre>
     * 是否报听
     * </pre>
     */
    boolean hasBaoTing();
    /**
     * <code>optional bool baoTing = 10;</code>
     *
     * <pre>
     * 是否报听
     * </pre>
     */
    boolean getBaoTing();

    // optional int32 tingDiscardIndex = 11;
    /**
     * <code>optional int32 tingDiscardIndex = 11;</code>
     *
     * <pre>
     * 报听时打出的牌位置
     * </pre>
     */
    boolean hasTingDiscardIndex();
    /**
     * <code>optional int32 tingDiscardIndex = 11;</code>
     *
     * <pre>
     * 报听时打出的牌位置
     * </pre>
     */
    int getTingDiscardIndex();
  }
  /**
   * Protobuf type {@code mahjong.PlayerSetInfo}
   */
  public static final class PlayerSetInfo extends
      com.google.protobuf.GeneratedMessage
      implements PlayerSetInfoOrBuilder {
    // Use PlayerSetInfo.newBuilder() to construct.
    private PlayerSetInfo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PlayerSetInfo(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PlayerSetInfo defaultInstance;
    public static PlayerSetInfo getDefaultInstance() {
      return defaultInstance;
    }

    public PlayerSetInfo getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PlayerSetInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              uid_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              handCardNum_ = input.readInt32();
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                handcards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              handcards_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                handcards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                handcards_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                discards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              discards_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                discards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                discards_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                cardGroups_ = new java.util.ArrayList<com.kuaikai.game.mahjong.msg.pb.CardGroupPB.CardGroup>();
                mutable_bitField0_ |= 0x00000010;
              }
              cardGroups_.add(input.readMessage(com.kuaikai.game.mahjong.msg.pb.CardGroupPB.CardGroup.PARSER, extensionRegistry));
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                points_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              points_.add(input.readInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                points_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                points_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 56: {
              int rawValue = input.readEnum();
              com.kuaikai.game.mahjong.msg.pb.DirectionPB.Direction value = com.kuaikai.game.mahjong.msg.pb.DirectionPB.Direction.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(7, rawValue);
              } else {
                bitField0_ |= 0x00000004;
                direction_ = value;
              }
              break;
            }
            case 64: {
              bitField0_ |= 0x00000008;
              bet_ = input.readInt32();
              break;
            }
            case 72: {
              int rawValue = input.readEnum();
              com.kuaikai.game.mahjong.msg.pb.CardTypePB.CardType value = com.kuaikai.game.mahjong.msg.pb.CardTypePB.CardType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(9, rawValue);
              } else {
                bitField0_ |= 0x00000010;
                queMen_ = value;
              }
              break;
            }
            case 80: {
              bitField0_ |= 0x00000020;
              baoTing_ = input.readBool();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000040;
              tingDiscardIndex_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          handcards_ = java.util.Collections.unmodifiableList(handcards_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          discards_ = java.util.Collections.unmodifiableList(discards_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          cardGroups_ = java.util.Collections.unmodifiableList(cardGroups_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          points_ = java.util.Collections.unmodifiableList(points_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.kuaikai.game.mahjong.msg.pb.PlayerSetInfoPB.internal_static_mahjong_PlayerSetInfo_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.kuaikai.game.mahjong.msg.pb.PlayerSetInfoPB.internal_static_mahjong_PlayerSetInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.kuaikai.game.mahjong.msg.pb.PlayerSetInfoPB.PlayerSetInfo.class, com.kuaikai.game.mahjong.msg.pb.PlayerSetInfoPB.PlayerSetInfo.Builder.class);
    }

    public static com.google.protobuf.Parser<PlayerSetInfo> PARSER =
        new com.google.protobuf.AbstractParser<PlayerSetInfo>() {
      public PlayerSetInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PlayerSetInfo(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PlayerSetInfo> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required int32 uid = 1;
    public static final int UID_FIELD_NUMBER = 1;
    private int uid_;
    /**
     * <code>required int32 uid = 1;</code>
     *
     * <pre>
     * 玩家ID
     * </pre>
     */
    public boolean hasUid() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 uid = 1;</code>
     *
     * <pre>
     * 玩家ID
     * </pre>
     */
    public int getUid() {
      return uid_;
    }

    // required int32 handCardNum = 2;
    public static final int HANDCARDNUM_FIELD_NUMBER = 2;
    private int handCardNum_;
    /**
     * <code>required int32 handCardNum = 2;</code>
     *
     * <pre>
     * 手牌数量
     * </pre>
     */
    public boolean hasHandCardNum() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 handCardNum = 2;</code>
     *
     * <pre>
     * 手牌数量
     * </pre>
     */
    public int getHandCardNum() {
      return handCardNum_;
    }

    // repeated int32 handcards = 3;
    public static final int HANDCARDS_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> handcards_;
    /**
     * <code>repeated int32 handcards = 3;</code>
     *
     * <pre>
     * 手牌（只有自己收到）
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getHandcardsList() {
      return handcards_;
    }
    /**
     * <code>repeated int32 handcards = 3;</code>
     *
     * <pre>
     * 手牌（只有自己收到）
     * </pre>
     */
    public int getHandcardsCount() {
      return handcards_.size();
    }
    /**
     * <code>repeated int32 handcards = 3;</code>
     *
     * <pre>
     * 手牌（只有自己收到）
     * </pre>
     */
    public int getHandcards(int index) {
      return handcards_.get(index);
    }

    // repeated int32 discards = 4;
    public static final int DISCARDS_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> discards_;
    /**
     * <code>repeated int32 discards = 4;</code>
     *
     * <pre>
     * 打出的牌
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getDiscardsList() {
      return discards_;
    }
    /**
     * <code>repeated int32 discards = 4;</code>
     *
     * <pre>
     * 打出的牌
     * </pre>
     */
    public int getDiscardsCount() {
      return discards_.size();
    }
    /**
     * <code>repeated int32 discards = 4;</code>
     *
     * <pre>
     * 打出的牌
     * </pre>
     */
    public int getDiscards(int index) {
      return discards_.get(index);
    }

    // repeated .mahjong.CardGroup cardGroups = 5;
    public static final int CARDGROUPS_FIELD_NUMBER = 5;
    private java.util.List<com.kuaikai.game.mahjong.msg.pb.CardGroupPB.CardGroup> cardGroups_;
    /**
     * <code>repeated .mahjong.CardGroup cardGroups = 5;</code>
     *
     * <pre>
     * 吃碰杠的牌
     * </pre>
     */
    public java.util.List<com.kuaikai.game.mahjong.msg.pb.CardGroupPB.CardGroup> getCardGroupsList() {
      return cardGroups_;
    }
    /**
     * <code>repeated .mahjong.CardGroup cardGroups = 5;</code>
     *
     * <pre>
     * 吃碰杠的牌
     * </pre>
     */
    public java.util.List<? extends com.kuaikai.game.mahjong.msg.pb.CardGroupPB.CardGroupOrBuilder> 
        getCardGroupsOrBuilderList() {
      return cardGroups_;
    }
    /**
     * <code>repeated .mahjong.CardGroup cardGroups = 5;</code>
     *
     * <pre>
     * 吃碰杠的牌
     * </pre>
     */
    public int getCardGroupsCount() {
      return cardGroups_.size();
    }
    /**
     * <code>repeated .mahjong.CardGroup cardGroups = 5;</code>
     *
     * <pre>
     * 吃碰杠的牌
     * </pre>
     */
    public com.kuaikai.game.mahjong.msg.pb.CardGroupPB.CardGroup getCardGroups(int index) {
      return cardGroups_.get(index);
    }
    /**
     * <code>repeated .mahjong.CardGroup cardGroups = 5;</code>
     *
     * <pre>
     * 吃碰杠的牌
     * </pre>
     */
    public com.kuaikai.game.mahjong.msg.pb.CardGroupPB.CardGroupOrBuilder getCardGroupsOrBuilder(
        int index) {
      return cardGroups_.get(index);
    }

    // repeated int32 points = 6;
    public static final int POINTS_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> points_;
    /**
     * <code>repeated int32 points = 6;</code>
     *
     * <pre>
     * 本场各项总得失分列表
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPointsList() {
      return points_;
    }
    /**
     * <code>repeated int32 points = 6;</code>
     *
     * <pre>
     * 本场各项总得失分列表
     * </pre>
     */
    public int getPointsCount() {
      return points_.size();
    }
    /**
     * <code>repeated int32 points = 6;</code>
     *
     * <pre>
     * 本场各项总得失分列表
     * </pre>
     */
    public int getPoints(int index) {
      return points_.get(index);
    }

    // optional .mahjong.Direction direction = 7;
    public static final int DIRECTION_FIELD_NUMBER = 7;
    private com.kuaikai.game.mahjong.msg.pb.DirectionPB.Direction direction_;
    /**
     * <code>optional .mahjong.Direction direction = 7;</code>
     *
     * <pre>
     * 玩家方位（门风）
     * </pre>
     */
    public boolean hasDirection() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .mahjong.Direction direction = 7;</code>
     *
     * <pre>
     * 玩家方位（门风）
     * </pre>
     */
    public com.kuaikai.game.mahjong.msg.pb.DirectionPB.Direction getDirection() {
      return direction_;
    }

    // optional int32 bet = 8;
    public static final int BET_FIELD_NUMBER = 8;
    private int bet_;
    /**
     * <code>optional int32 bet = 8;</code>
     *
     * <pre>
     * 本局下注数量
     * </pre>
     */
    public boolean hasBet() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 bet = 8;</code>
     *
     * <pre>
     * 本局下注数量
     * </pre>
     */
    public int getBet() {
      return bet_;
    }

    // optional .mahjong.CardType queMen = 9;
    public static final int QUEMEN_FIELD_NUMBER = 9;
    private com.kuaikai.game.mahjong.msg.pb.CardTypePB.CardType queMen_;
    /**
     * <code>optional .mahjong.CardType queMen = 9;</code>
     *
     * <pre>
     * 本局缺门，0 无效  10 万 20 条 30 筒
     * </pre>
     */
    public boolean hasQueMen() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .mahjong.CardType queMen = 9;</code>
     *
     * <pre>
     * 本局缺门，0 无效  10 万 20 条 30 筒
     * </pre>
     */
    public com.kuaikai.game.mahjong.msg.pb.CardTypePB.CardType getQueMen() {
      return queMen_;
    }

    // optional bool baoTing = 10;
    public static final int BAOTING_FIELD_NUMBER = 10;
    private boolean baoTing_;
    /**
     * <code>optional bool baoTing = 10;</code>
     *
     * <pre>
     * 是否报听
     * </pre>
     */
    public boolean hasBaoTing() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional bool baoTing = 10;</code>
     *
     * <pre>
     * 是否报听
     * </pre>
     */
    public boolean getBaoTing() {
      return baoTing_;
    }

    // optional int32 tingDiscardIndex = 11;
    public static final int TINGDISCARDINDEX_FIELD_NUMBER = 11;
    private int tingDiscardIndex_;
    /**
     * <code>optional int32 tingDiscardIndex = 11;</code>
     *
     * <pre>
     * 报听时打出的牌位置
     * </pre>
     */
    public boolean hasTingDiscardIndex() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 tingDiscardIndex = 11;</code>
     *
     * <pre>
     * 报听时打出的牌位置
     * </pre>
     */
    public int getTingDiscardIndex() {
      return tingDiscardIndex_;
    }

    private void initFields() {
      uid_ = 0;
      handCardNum_ = 0;
      handcards_ = java.util.Collections.emptyList();
      discards_ = java.util.Collections.emptyList();
      cardGroups_ = java.util.Collections.emptyList();
      points_ = java.util.Collections.emptyList();
      direction_ = com.kuaikai.game.mahjong.msg.pb.DirectionPB.Direction.DONG;
      bet_ = 0;
      queMen_ = com.kuaikai.game.mahjong.msg.pb.CardTypePB.CardType.NA;
      baoTing_ = false;
      tingDiscardIndex_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasUid()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHandCardNum()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getCardGroupsCount(); i++) {
        if (!getCardGroups(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, uid_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, handCardNum_);
      }
      for (int i = 0; i < handcards_.size(); i++) {
        output.writeInt32(3, handcards_.get(i));
      }
      for (int i = 0; i < discards_.size(); i++) {
        output.writeInt32(4, discards_.get(i));
      }
      for (int i = 0; i < cardGroups_.size(); i++) {
        output.writeMessage(5, cardGroups_.get(i));
      }
      for (int i = 0; i < points_.size(); i++) {
        output.writeInt32(6, points_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeEnum(7, direction_.getNumber());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(8, bet_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeEnum(9, queMen_.getNumber());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBool(10, baoTing_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(11, tingDiscardIndex_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, uid_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, handCardNum_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < handcards_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(handcards_.get(i));
        }
        size += dataSize;
        size += 1 * getHandcardsList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < discards_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(discards_.get(i));
        }
        size += dataSize;
        size += 1 * getDiscardsList().size();
      }
      for (int i = 0; i < cardGroups_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, cardGroups_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < points_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(points_.get(i));
        }
        size += dataSize;
        size += 1 * getPointsList().size();
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(7, direction_.getNumber());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, bet_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(9, queMen_.getNumber());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(10, baoTing_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11, tingDiscardIndex_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.kuaikai.game.mahjong.msg.pb.PlayerSetInfoPB.PlayerSetInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.kuaikai.game.mahjong.msg.pb.PlayerSetInfoPB.PlayerSetInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.kuaikai.game.mahjong.msg.pb.PlayerSetInfoPB.PlayerSetInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.kuaikai.game.mahjong.msg.pb.PlayerSetInfoPB.PlayerSetInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.kuaikai.game.mahjong.msg.pb.PlayerSetInfoPB.PlayerSetInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.kuaikai.game.mahjong.msg.pb.PlayerSetInfoPB.PlayerSetInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.kuaikai.game.mahjong.msg.pb.PlayerSetInfoPB.PlayerSetInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.kuaikai.game.mahjong.msg.pb.PlayerSetInfoPB.PlayerSetInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.kuaikai.game.mahjong.msg.pb.PlayerSetInfoPB.PlayerSetInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.kuaikai.game.mahjong.msg.pb.PlayerSetInfoPB.PlayerSetInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.kuaikai.game.mahjong.msg.pb.PlayerSetInfoPB.PlayerSetInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code mahjong.PlayerSetInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.kuaikai.game.mahjong.msg.pb.PlayerSetInfoPB.PlayerSetInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.kuaikai.game.mahjong.msg.pb.PlayerSetInfoPB.internal_static_mahjong_PlayerSetInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.kuaikai.game.mahjong.msg.pb.PlayerSetInfoPB.internal_static_mahjong_PlayerSetInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.kuaikai.game.mahjong.msg.pb.PlayerSetInfoPB.PlayerSetInfo.class, com.kuaikai.game.mahjong.msg.pb.PlayerSetInfoPB.PlayerSetInfo.Builder.class);
      }

      // Construct using com.kuaikai.game.mahjong.msg.pb.PlayerSetInfoPB.PlayerSetInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCardGroupsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        uid_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        handCardNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        handcards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        discards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        if (cardGroupsBuilder_ == null) {
          cardGroups_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          cardGroupsBuilder_.clear();
        }
        points_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        direction_ = com.kuaikai.game.mahjong.msg.pb.DirectionPB.Direction.DONG;
        bitField0_ = (bitField0_ & ~0x00000040);
        bet_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        queMen_ = com.kuaikai.game.mahjong.msg.pb.CardTypePB.CardType.NA;
        bitField0_ = (bitField0_ & ~0x00000100);
        baoTing_ = false;
        bitField0_ = (bitField0_ & ~0x00000200);
        tingDiscardIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.kuaikai.game.mahjong.msg.pb.PlayerSetInfoPB.internal_static_mahjong_PlayerSetInfo_descriptor;
      }

      public com.kuaikai.game.mahjong.msg.pb.PlayerSetInfoPB.PlayerSetInfo getDefaultInstanceForType() {
        return com.kuaikai.game.mahjong.msg.pb.PlayerSetInfoPB.PlayerSetInfo.getDefaultInstance();
      }

      public com.kuaikai.game.mahjong.msg.pb.PlayerSetInfoPB.PlayerSetInfo build() {
        com.kuaikai.game.mahjong.msg.pb.PlayerSetInfoPB.PlayerSetInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.kuaikai.game.mahjong.msg.pb.PlayerSetInfoPB.PlayerSetInfo buildPartial() {
        com.kuaikai.game.mahjong.msg.pb.PlayerSetInfoPB.PlayerSetInfo result = new com.kuaikai.game.mahjong.msg.pb.PlayerSetInfoPB.PlayerSetInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.uid_ = uid_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.handCardNum_ = handCardNum_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          handcards_ = java.util.Collections.unmodifiableList(handcards_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.handcards_ = handcards_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          discards_ = java.util.Collections.unmodifiableList(discards_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.discards_ = discards_;
        if (cardGroupsBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            cardGroups_ = java.util.Collections.unmodifiableList(cardGroups_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.cardGroups_ = cardGroups_;
        } else {
          result.cardGroups_ = cardGroupsBuilder_.build();
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          points_ = java.util.Collections.unmodifiableList(points_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.points_ = points_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000004;
        }
        result.direction_ = direction_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000008;
        }
        result.bet_ = bet_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000010;
        }
        result.queMen_ = queMen_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000020;
        }
        result.baoTing_ = baoTing_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000040;
        }
        result.tingDiscardIndex_ = tingDiscardIndex_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.kuaikai.game.mahjong.msg.pb.PlayerSetInfoPB.PlayerSetInfo) {
          return mergeFrom((com.kuaikai.game.mahjong.msg.pb.PlayerSetInfoPB.PlayerSetInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.kuaikai.game.mahjong.msg.pb.PlayerSetInfoPB.PlayerSetInfo other) {
        if (other == com.kuaikai.game.mahjong.msg.pb.PlayerSetInfoPB.PlayerSetInfo.getDefaultInstance()) return this;
        if (other.hasUid()) {
          setUid(other.getUid());
        }
        if (other.hasHandCardNum()) {
          setHandCardNum(other.getHandCardNum());
        }
        if (!other.handcards_.isEmpty()) {
          if (handcards_.isEmpty()) {
            handcards_ = other.handcards_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureHandcardsIsMutable();
            handcards_.addAll(other.handcards_);
          }
          onChanged();
        }
        if (!other.discards_.isEmpty()) {
          if (discards_.isEmpty()) {
            discards_ = other.discards_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureDiscardsIsMutable();
            discards_.addAll(other.discards_);
          }
          onChanged();
        }
        if (cardGroupsBuilder_ == null) {
          if (!other.cardGroups_.isEmpty()) {
            if (cardGroups_.isEmpty()) {
              cardGroups_ = other.cardGroups_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureCardGroupsIsMutable();
              cardGroups_.addAll(other.cardGroups_);
            }
            onChanged();
          }
        } else {
          if (!other.cardGroups_.isEmpty()) {
            if (cardGroupsBuilder_.isEmpty()) {
              cardGroupsBuilder_.dispose();
              cardGroupsBuilder_ = null;
              cardGroups_ = other.cardGroups_;
              bitField0_ = (bitField0_ & ~0x00000010);
              cardGroupsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardGroupsFieldBuilder() : null;
            } else {
              cardGroupsBuilder_.addAllMessages(other.cardGroups_);
            }
          }
        }
        if (!other.points_.isEmpty()) {
          if (points_.isEmpty()) {
            points_ = other.points_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensurePointsIsMutable();
            points_.addAll(other.points_);
          }
          onChanged();
        }
        if (other.hasDirection()) {
          setDirection(other.getDirection());
        }
        if (other.hasBet()) {
          setBet(other.getBet());
        }
        if (other.hasQueMen()) {
          setQueMen(other.getQueMen());
        }
        if (other.hasBaoTing()) {
          setBaoTing(other.getBaoTing());
        }
        if (other.hasTingDiscardIndex()) {
          setTingDiscardIndex(other.getTingDiscardIndex());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasUid()) {
          
          return false;
        }
        if (!hasHandCardNum()) {
          
          return false;
        }
        for (int i = 0; i < getCardGroupsCount(); i++) {
          if (!getCardGroups(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.kuaikai.game.mahjong.msg.pb.PlayerSetInfoPB.PlayerSetInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.kuaikai.game.mahjong.msg.pb.PlayerSetInfoPB.PlayerSetInfo) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int32 uid = 1;
      private int uid_ ;
      /**
       * <code>required int32 uid = 1;</code>
       *
       * <pre>
       * 玩家ID
       * </pre>
       */
      public boolean hasUid() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 uid = 1;</code>
       *
       * <pre>
       * 玩家ID
       * </pre>
       */
      public int getUid() {
        return uid_;
      }
      /**
       * <code>required int32 uid = 1;</code>
       *
       * <pre>
       * 玩家ID
       * </pre>
       */
      public Builder setUid(int value) {
        bitField0_ |= 0x00000001;
        uid_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 uid = 1;</code>
       *
       * <pre>
       * 玩家ID
       * </pre>
       */
      public Builder clearUid() {
        bitField0_ = (bitField0_ & ~0x00000001);
        uid_ = 0;
        onChanged();
        return this;
      }

      // required int32 handCardNum = 2;
      private int handCardNum_ ;
      /**
       * <code>required int32 handCardNum = 2;</code>
       *
       * <pre>
       * 手牌数量
       * </pre>
       */
      public boolean hasHandCardNum() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 handCardNum = 2;</code>
       *
       * <pre>
       * 手牌数量
       * </pre>
       */
      public int getHandCardNum() {
        return handCardNum_;
      }
      /**
       * <code>required int32 handCardNum = 2;</code>
       *
       * <pre>
       * 手牌数量
       * </pre>
       */
      public Builder setHandCardNum(int value) {
        bitField0_ |= 0x00000002;
        handCardNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 handCardNum = 2;</code>
       *
       * <pre>
       * 手牌数量
       * </pre>
       */
      public Builder clearHandCardNum() {
        bitField0_ = (bitField0_ & ~0x00000002);
        handCardNum_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 handcards = 3;
      private java.util.List<java.lang.Integer> handcards_ = java.util.Collections.emptyList();
      private void ensureHandcardsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          handcards_ = new java.util.ArrayList<java.lang.Integer>(handcards_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 handcards = 3;</code>
       *
       * <pre>
       * 手牌（只有自己收到）
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getHandcardsList() {
        return java.util.Collections.unmodifiableList(handcards_);
      }
      /**
       * <code>repeated int32 handcards = 3;</code>
       *
       * <pre>
       * 手牌（只有自己收到）
       * </pre>
       */
      public int getHandcardsCount() {
        return handcards_.size();
      }
      /**
       * <code>repeated int32 handcards = 3;</code>
       *
       * <pre>
       * 手牌（只有自己收到）
       * </pre>
       */
      public int getHandcards(int index) {
        return handcards_.get(index);
      }
      /**
       * <code>repeated int32 handcards = 3;</code>
       *
       * <pre>
       * 手牌（只有自己收到）
       * </pre>
       */
      public Builder setHandcards(
          int index, int value) {
        ensureHandcardsIsMutable();
        handcards_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 handcards = 3;</code>
       *
       * <pre>
       * 手牌（只有自己收到）
       * </pre>
       */
      public Builder addHandcards(int value) {
        ensureHandcardsIsMutable();
        handcards_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 handcards = 3;</code>
       *
       * <pre>
       * 手牌（只有自己收到）
       * </pre>
       */
      public Builder addAllHandcards(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureHandcardsIsMutable();
        super.addAll(values, handcards_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 handcards = 3;</code>
       *
       * <pre>
       * 手牌（只有自己收到）
       * </pre>
       */
      public Builder clearHandcards() {
        handcards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // repeated int32 discards = 4;
      private java.util.List<java.lang.Integer> discards_ = java.util.Collections.emptyList();
      private void ensureDiscardsIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          discards_ = new java.util.ArrayList<java.lang.Integer>(discards_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 discards = 4;</code>
       *
       * <pre>
       * 打出的牌
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getDiscardsList() {
        return java.util.Collections.unmodifiableList(discards_);
      }
      /**
       * <code>repeated int32 discards = 4;</code>
       *
       * <pre>
       * 打出的牌
       * </pre>
       */
      public int getDiscardsCount() {
        return discards_.size();
      }
      /**
       * <code>repeated int32 discards = 4;</code>
       *
       * <pre>
       * 打出的牌
       * </pre>
       */
      public int getDiscards(int index) {
        return discards_.get(index);
      }
      /**
       * <code>repeated int32 discards = 4;</code>
       *
       * <pre>
       * 打出的牌
       * </pre>
       */
      public Builder setDiscards(
          int index, int value) {
        ensureDiscardsIsMutable();
        discards_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 discards = 4;</code>
       *
       * <pre>
       * 打出的牌
       * </pre>
       */
      public Builder addDiscards(int value) {
        ensureDiscardsIsMutable();
        discards_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 discards = 4;</code>
       *
       * <pre>
       * 打出的牌
       * </pre>
       */
      public Builder addAllDiscards(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureDiscardsIsMutable();
        super.addAll(values, discards_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 discards = 4;</code>
       *
       * <pre>
       * 打出的牌
       * </pre>
       */
      public Builder clearDiscards() {
        discards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated .mahjong.CardGroup cardGroups = 5;
      private java.util.List<com.kuaikai.game.mahjong.msg.pb.CardGroupPB.CardGroup> cardGroups_ =
        java.util.Collections.emptyList();
      private void ensureCardGroupsIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          cardGroups_ = new java.util.ArrayList<com.kuaikai.game.mahjong.msg.pb.CardGroupPB.CardGroup>(cardGroups_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.kuaikai.game.mahjong.msg.pb.CardGroupPB.CardGroup, com.kuaikai.game.mahjong.msg.pb.CardGroupPB.CardGroup.Builder, com.kuaikai.game.mahjong.msg.pb.CardGroupPB.CardGroupOrBuilder> cardGroupsBuilder_;

      /**
       * <code>repeated .mahjong.CardGroup cardGroups = 5;</code>
       *
       * <pre>
       * 吃碰杠的牌
       * </pre>
       */
      public java.util.List<com.kuaikai.game.mahjong.msg.pb.CardGroupPB.CardGroup> getCardGroupsList() {
        if (cardGroupsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardGroups_);
        } else {
          return cardGroupsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .mahjong.CardGroup cardGroups = 5;</code>
       *
       * <pre>
       * 吃碰杠的牌
       * </pre>
       */
      public int getCardGroupsCount() {
        if (cardGroupsBuilder_ == null) {
          return cardGroups_.size();
        } else {
          return cardGroupsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .mahjong.CardGroup cardGroups = 5;</code>
       *
       * <pre>
       * 吃碰杠的牌
       * </pre>
       */
      public com.kuaikai.game.mahjong.msg.pb.CardGroupPB.CardGroup getCardGroups(int index) {
        if (cardGroupsBuilder_ == null) {
          return cardGroups_.get(index);
        } else {
          return cardGroupsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .mahjong.CardGroup cardGroups = 5;</code>
       *
       * <pre>
       * 吃碰杠的牌
       * </pre>
       */
      public Builder setCardGroups(
          int index, com.kuaikai.game.mahjong.msg.pb.CardGroupPB.CardGroup value) {
        if (cardGroupsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardGroupsIsMutable();
          cardGroups_.set(index, value);
          onChanged();
        } else {
          cardGroupsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .mahjong.CardGroup cardGroups = 5;</code>
       *
       * <pre>
       * 吃碰杠的牌
       * </pre>
       */
      public Builder setCardGroups(
          int index, com.kuaikai.game.mahjong.msg.pb.CardGroupPB.CardGroup.Builder builderForValue) {
        if (cardGroupsBuilder_ == null) {
          ensureCardGroupsIsMutable();
          cardGroups_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardGroupsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .mahjong.CardGroup cardGroups = 5;</code>
       *
       * <pre>
       * 吃碰杠的牌
       * </pre>
       */
      public Builder addCardGroups(com.kuaikai.game.mahjong.msg.pb.CardGroupPB.CardGroup value) {
        if (cardGroupsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardGroupsIsMutable();
          cardGroups_.add(value);
          onChanged();
        } else {
          cardGroupsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .mahjong.CardGroup cardGroups = 5;</code>
       *
       * <pre>
       * 吃碰杠的牌
       * </pre>
       */
      public Builder addCardGroups(
          int index, com.kuaikai.game.mahjong.msg.pb.CardGroupPB.CardGroup value) {
        if (cardGroupsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardGroupsIsMutable();
          cardGroups_.add(index, value);
          onChanged();
        } else {
          cardGroupsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .mahjong.CardGroup cardGroups = 5;</code>
       *
       * <pre>
       * 吃碰杠的牌
       * </pre>
       */
      public Builder addCardGroups(
          com.kuaikai.game.mahjong.msg.pb.CardGroupPB.CardGroup.Builder builderForValue) {
        if (cardGroupsBuilder_ == null) {
          ensureCardGroupsIsMutable();
          cardGroups_.add(builderForValue.build());
          onChanged();
        } else {
          cardGroupsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .mahjong.CardGroup cardGroups = 5;</code>
       *
       * <pre>
       * 吃碰杠的牌
       * </pre>
       */
      public Builder addCardGroups(
          int index, com.kuaikai.game.mahjong.msg.pb.CardGroupPB.CardGroup.Builder builderForValue) {
        if (cardGroupsBuilder_ == null) {
          ensureCardGroupsIsMutable();
          cardGroups_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardGroupsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .mahjong.CardGroup cardGroups = 5;</code>
       *
       * <pre>
       * 吃碰杠的牌
       * </pre>
       */
      public Builder addAllCardGroups(
          java.lang.Iterable<? extends com.kuaikai.game.mahjong.msg.pb.CardGroupPB.CardGroup> values) {
        if (cardGroupsBuilder_ == null) {
          ensureCardGroupsIsMutable();
          super.addAll(values, cardGroups_);
          onChanged();
        } else {
          cardGroupsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .mahjong.CardGroup cardGroups = 5;</code>
       *
       * <pre>
       * 吃碰杠的牌
       * </pre>
       */
      public Builder clearCardGroups() {
        if (cardGroupsBuilder_ == null) {
          cardGroups_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          cardGroupsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .mahjong.CardGroup cardGroups = 5;</code>
       *
       * <pre>
       * 吃碰杠的牌
       * </pre>
       */
      public Builder removeCardGroups(int index) {
        if (cardGroupsBuilder_ == null) {
          ensureCardGroupsIsMutable();
          cardGroups_.remove(index);
          onChanged();
        } else {
          cardGroupsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .mahjong.CardGroup cardGroups = 5;</code>
       *
       * <pre>
       * 吃碰杠的牌
       * </pre>
       */
      public com.kuaikai.game.mahjong.msg.pb.CardGroupPB.CardGroup.Builder getCardGroupsBuilder(
          int index) {
        return getCardGroupsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .mahjong.CardGroup cardGroups = 5;</code>
       *
       * <pre>
       * 吃碰杠的牌
       * </pre>
       */
      public com.kuaikai.game.mahjong.msg.pb.CardGroupPB.CardGroupOrBuilder getCardGroupsOrBuilder(
          int index) {
        if (cardGroupsBuilder_ == null) {
          return cardGroups_.get(index);  } else {
          return cardGroupsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .mahjong.CardGroup cardGroups = 5;</code>
       *
       * <pre>
       * 吃碰杠的牌
       * </pre>
       */
      public java.util.List<? extends com.kuaikai.game.mahjong.msg.pb.CardGroupPB.CardGroupOrBuilder> 
           getCardGroupsOrBuilderList() {
        if (cardGroupsBuilder_ != null) {
          return cardGroupsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardGroups_);
        }
      }
      /**
       * <code>repeated .mahjong.CardGroup cardGroups = 5;</code>
       *
       * <pre>
       * 吃碰杠的牌
       * </pre>
       */
      public com.kuaikai.game.mahjong.msg.pb.CardGroupPB.CardGroup.Builder addCardGroupsBuilder() {
        return getCardGroupsFieldBuilder().addBuilder(
            com.kuaikai.game.mahjong.msg.pb.CardGroupPB.CardGroup.getDefaultInstance());
      }
      /**
       * <code>repeated .mahjong.CardGroup cardGroups = 5;</code>
       *
       * <pre>
       * 吃碰杠的牌
       * </pre>
       */
      public com.kuaikai.game.mahjong.msg.pb.CardGroupPB.CardGroup.Builder addCardGroupsBuilder(
          int index) {
        return getCardGroupsFieldBuilder().addBuilder(
            index, com.kuaikai.game.mahjong.msg.pb.CardGroupPB.CardGroup.getDefaultInstance());
      }
      /**
       * <code>repeated .mahjong.CardGroup cardGroups = 5;</code>
       *
       * <pre>
       * 吃碰杠的牌
       * </pre>
       */
      public java.util.List<com.kuaikai.game.mahjong.msg.pb.CardGroupPB.CardGroup.Builder> 
           getCardGroupsBuilderList() {
        return getCardGroupsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.kuaikai.game.mahjong.msg.pb.CardGroupPB.CardGroup, com.kuaikai.game.mahjong.msg.pb.CardGroupPB.CardGroup.Builder, com.kuaikai.game.mahjong.msg.pb.CardGroupPB.CardGroupOrBuilder> 
          getCardGroupsFieldBuilder() {
        if (cardGroupsBuilder_ == null) {
          cardGroupsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.kuaikai.game.mahjong.msg.pb.CardGroupPB.CardGroup, com.kuaikai.game.mahjong.msg.pb.CardGroupPB.CardGroup.Builder, com.kuaikai.game.mahjong.msg.pb.CardGroupPB.CardGroupOrBuilder>(
                  cardGroups_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          cardGroups_ = null;
        }
        return cardGroupsBuilder_;
      }

      // repeated int32 points = 6;
      private java.util.List<java.lang.Integer> points_ = java.util.Collections.emptyList();
      private void ensurePointsIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          points_ = new java.util.ArrayList<java.lang.Integer>(points_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated int32 points = 6;</code>
       *
       * <pre>
       * 本场各项总得失分列表
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPointsList() {
        return java.util.Collections.unmodifiableList(points_);
      }
      /**
       * <code>repeated int32 points = 6;</code>
       *
       * <pre>
       * 本场各项总得失分列表
       * </pre>
       */
      public int getPointsCount() {
        return points_.size();
      }
      /**
       * <code>repeated int32 points = 6;</code>
       *
       * <pre>
       * 本场各项总得失分列表
       * </pre>
       */
      public int getPoints(int index) {
        return points_.get(index);
      }
      /**
       * <code>repeated int32 points = 6;</code>
       *
       * <pre>
       * 本场各项总得失分列表
       * </pre>
       */
      public Builder setPoints(
          int index, int value) {
        ensurePointsIsMutable();
        points_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 points = 6;</code>
       *
       * <pre>
       * 本场各项总得失分列表
       * </pre>
       */
      public Builder addPoints(int value) {
        ensurePointsIsMutable();
        points_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 points = 6;</code>
       *
       * <pre>
       * 本场各项总得失分列表
       * </pre>
       */
      public Builder addAllPoints(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePointsIsMutable();
        super.addAll(values, points_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 points = 6;</code>
       *
       * <pre>
       * 本场各项总得失分列表
       * </pre>
       */
      public Builder clearPoints() {
        points_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // optional .mahjong.Direction direction = 7;
      private com.kuaikai.game.mahjong.msg.pb.DirectionPB.Direction direction_ = com.kuaikai.game.mahjong.msg.pb.DirectionPB.Direction.DONG;
      /**
       * <code>optional .mahjong.Direction direction = 7;</code>
       *
       * <pre>
       * 玩家方位（门风）
       * </pre>
       */
      public boolean hasDirection() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .mahjong.Direction direction = 7;</code>
       *
       * <pre>
       * 玩家方位（门风）
       * </pre>
       */
      public com.kuaikai.game.mahjong.msg.pb.DirectionPB.Direction getDirection() {
        return direction_;
      }
      /**
       * <code>optional .mahjong.Direction direction = 7;</code>
       *
       * <pre>
       * 玩家方位（门风）
       * </pre>
       */
      public Builder setDirection(com.kuaikai.game.mahjong.msg.pb.DirectionPB.Direction value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000040;
        direction_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .mahjong.Direction direction = 7;</code>
       *
       * <pre>
       * 玩家方位（门风）
       * </pre>
       */
      public Builder clearDirection() {
        bitField0_ = (bitField0_ & ~0x00000040);
        direction_ = com.kuaikai.game.mahjong.msg.pb.DirectionPB.Direction.DONG;
        onChanged();
        return this;
      }

      // optional int32 bet = 8;
      private int bet_ ;
      /**
       * <code>optional int32 bet = 8;</code>
       *
       * <pre>
       * 本局下注数量
       * </pre>
       */
      public boolean hasBet() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 bet = 8;</code>
       *
       * <pre>
       * 本局下注数量
       * </pre>
       */
      public int getBet() {
        return bet_;
      }
      /**
       * <code>optional int32 bet = 8;</code>
       *
       * <pre>
       * 本局下注数量
       * </pre>
       */
      public Builder setBet(int value) {
        bitField0_ |= 0x00000080;
        bet_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 bet = 8;</code>
       *
       * <pre>
       * 本局下注数量
       * </pre>
       */
      public Builder clearBet() {
        bitField0_ = (bitField0_ & ~0x00000080);
        bet_ = 0;
        onChanged();
        return this;
      }

      // optional .mahjong.CardType queMen = 9;
      private com.kuaikai.game.mahjong.msg.pb.CardTypePB.CardType queMen_ = com.kuaikai.game.mahjong.msg.pb.CardTypePB.CardType.NA;
      /**
       * <code>optional .mahjong.CardType queMen = 9;</code>
       *
       * <pre>
       * 本局缺门，0 无效  10 万 20 条 30 筒
       * </pre>
       */
      public boolean hasQueMen() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional .mahjong.CardType queMen = 9;</code>
       *
       * <pre>
       * 本局缺门，0 无效  10 万 20 条 30 筒
       * </pre>
       */
      public com.kuaikai.game.mahjong.msg.pb.CardTypePB.CardType getQueMen() {
        return queMen_;
      }
      /**
       * <code>optional .mahjong.CardType queMen = 9;</code>
       *
       * <pre>
       * 本局缺门，0 无效  10 万 20 条 30 筒
       * </pre>
       */
      public Builder setQueMen(com.kuaikai.game.mahjong.msg.pb.CardTypePB.CardType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000100;
        queMen_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .mahjong.CardType queMen = 9;</code>
       *
       * <pre>
       * 本局缺门，0 无效  10 万 20 条 30 筒
       * </pre>
       */
      public Builder clearQueMen() {
        bitField0_ = (bitField0_ & ~0x00000100);
        queMen_ = com.kuaikai.game.mahjong.msg.pb.CardTypePB.CardType.NA;
        onChanged();
        return this;
      }

      // optional bool baoTing = 10;
      private boolean baoTing_ ;
      /**
       * <code>optional bool baoTing = 10;</code>
       *
       * <pre>
       * 是否报听
       * </pre>
       */
      public boolean hasBaoTing() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional bool baoTing = 10;</code>
       *
       * <pre>
       * 是否报听
       * </pre>
       */
      public boolean getBaoTing() {
        return baoTing_;
      }
      /**
       * <code>optional bool baoTing = 10;</code>
       *
       * <pre>
       * 是否报听
       * </pre>
       */
      public Builder setBaoTing(boolean value) {
        bitField0_ |= 0x00000200;
        baoTing_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool baoTing = 10;</code>
       *
       * <pre>
       * 是否报听
       * </pre>
       */
      public Builder clearBaoTing() {
        bitField0_ = (bitField0_ & ~0x00000200);
        baoTing_ = false;
        onChanged();
        return this;
      }

      // optional int32 tingDiscardIndex = 11;
      private int tingDiscardIndex_ ;
      /**
       * <code>optional int32 tingDiscardIndex = 11;</code>
       *
       * <pre>
       * 报听时打出的牌位置
       * </pre>
       */
      public boolean hasTingDiscardIndex() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional int32 tingDiscardIndex = 11;</code>
       *
       * <pre>
       * 报听时打出的牌位置
       * </pre>
       */
      public int getTingDiscardIndex() {
        return tingDiscardIndex_;
      }
      /**
       * <code>optional int32 tingDiscardIndex = 11;</code>
       *
       * <pre>
       * 报听时打出的牌位置
       * </pre>
       */
      public Builder setTingDiscardIndex(int value) {
        bitField0_ |= 0x00000400;
        tingDiscardIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 tingDiscardIndex = 11;</code>
       *
       * <pre>
       * 报听时打出的牌位置
       * </pre>
       */
      public Builder clearTingDiscardIndex() {
        bitField0_ = (bitField0_ & ~0x00000400);
        tingDiscardIndex_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:mahjong.PlayerSetInfo)
    }

    static {
      defaultInstance = new PlayerSetInfo(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:mahjong.PlayerSetInfo)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_mahjong_PlayerSetInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_mahjong_PlayerSetInfo_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\033mahjong/PlayerSetInfo.proto\022\007mahjong\032\027" +
      "mahjong/CardGroup.proto\032\027mahjong/Directi" +
      "on.proto\032\026mahjong/CardType.proto\"\220\002\n\rPla" +
      "yerSetInfo\022\013\n\003uid\030\001 \002(\005\022\023\n\013handCardNum\030\002" +
      " \002(\005\022\021\n\thandcards\030\003 \003(\005\022\020\n\010discards\030\004 \003(" +
      "\005\022&\n\ncardGroups\030\005 \003(\0132\022.mahjong.CardGrou" +
      "p\022\016\n\006points\030\006 \003(\005\022%\n\tdirection\030\007 \001(\0162\022.m" +
      "ahjong.Direction\022\013\n\003bet\030\010 \001(\005\022!\n\006queMen\030" +
      "\t \001(\0162\021.mahjong.CardType\022\017\n\007baoTing\030\n \001(" +
      "\010\022\030\n\020tingDiscardIndex\030\013 \001(\005B2\n\037com.kuaik",
      "ai.game.mahjong.msg.pbB\017PlayerSetInfoPB"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_mahjong_PlayerSetInfo_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_mahjong_PlayerSetInfo_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_mahjong_PlayerSetInfo_descriptor,
              new java.lang.String[] { "Uid", "HandCardNum", "Handcards", "Discards", "CardGroups", "Points", "Direction", "Bet", "QueMen", "BaoTing", "TingDiscardIndex", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.kuaikai.game.mahjong.msg.pb.CardGroupPB.getDescriptor(),
          com.kuaikai.game.mahjong.msg.pb.DirectionPB.getDescriptor(),
          com.kuaikai.game.mahjong.msg.pb.CardTypePB.getDescriptor(),
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
